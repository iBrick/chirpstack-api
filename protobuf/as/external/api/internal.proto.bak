syntax = "proto3";

package api;

option go_package = "github.com/brocaar/chirpstack-api/go/v3/as/external/api";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "as/external/api/user.proto";


// InternalService - сервис, предоставляющий API для внутреннего использования.
service InternalService {
	// Log in a user
	rpc Login(LoginRequest) returns (LoginResponse) {
		option(google.api.http) = {
			post: "/api/internal/login"
			body: "*"
		};
	}

	// Получить профиль текущего пользователя 
	rpc Profile(google.protobuf.Empty) returns (ProfileResponse) {
		option(google.api.http) = {
			get: "/api/internal/profile"
		};
	}

	// Получить брендинг для пользовательского интерфейса
	rpc Branding(google.protobuf.Empty) returns (BrandingResponse) {
		option(google.api.http) = {
			get: "/api/internal/branding"
		};
	}

	// Выполнить глобальный поиск.
	rpc GlobalSearch(GlobalSearchRequest) returns (GlobalSearchResponse) {
		option(google.api.http) = {
			get: "/api/internal/search"
		};
	}

    // CreateAPIKey - создает ключ API.
    rpc CreateAPIKey(CreateAPIKeyRequest) returns (CreateAPIKeyResponse) {
        option(google.api.http) = {
            post: "/api/internal/api-keys"
            body: "*"
        };
    }

    // DeleteAPIKey удаляет ключ API.
    rpc DeleteAPIKey(DeleteAPIKeyRequest) returns (google.protobuf.Empty) {
        option(google.api.http) = {
            delete: "/api/internal/api-keys/{id}"
        };
    }

    // ListAPIKeys возвращает список доступных API ключей.
    rpc ListAPIKeys(ListAPIKeysRequest) returns (ListAPIKeysResponse) {
        option(google.api.http) = {
            get: "/api/internal/api-keys"
        };
    }
}

message APIKey {
    // ID ключа API.
    // Значение автоматически генерируется при создании.
    string id = 1;

    // Название.
    string name = 2;

    // Ключ глобального администратора?
    bool is_admin = 3;

    // ID организации.
    // Если указано, то ключ API позволяет работать с ресурсами только внутри указанной организации.
    int64 organization_id = 4 [json_name = "organizationID"];

    // ID приложения.
    // Если указано, то ключ API позволяет работать с ресурсами только внутри указанного приложения.
    // this to the ID of this application.message
    int64 application_id = 5 [json_name = "applicationID"];
}

message CreateAPIKeyRequest {
    // The API key to create.
    APIKey api_key = 1;
}

message CreateAPIKeyResponse {
    // API key ID.
    string id = 1;

    // JWT token for this API Key.
    string jwt_token = 2;
}

message DeleteAPIKeyRequest {
    // API key ID.
    string id = 1;
}

message ListAPIKeysRequest {
    // Max number of items to return.
    int64 limit = 1;

    // Offset in the result-set (for pagination).
    int64 offset = 2;

    // Return only admin keys.
    bool is_admin = 3;

    // Filter on organization ID.
    int64 organization_id = 4 [json_name = "organizationID"];

    // Filter on application ID.
    int64 application_id = 5 [json_name = "applicationID"];
}

message ListAPIKeysResponse {
    // Total number of API keys.
    int64 total_count = 1;

    repeated APIKey result = 2;
}

message ProfileSettings {
	// Existing users in the system can not be assigned to organizations and
	// application and can not be listed by non global admin users.
	bool disable_assign_existing_users = 1;
}

// Defines an organization to which an user is associated.
message OrganizationLink {
    // Organization ID.
    int64 organization_id = 1 [json_name = "organizationID"];
    
    // Organization name.
    string organization_name = 2;
    
    // User is admin within the context of this organization.
    // There is no need to set the is_device_admin and is_gateway_admin flags.
    bool is_admin = 3;

    // User is able to modify device related resources (applications,
    // device-profiles, devices, multicast-groups).
    bool is_device_admin = 6;

    // User is able to modify gateways.
    bool is_gateway_admin = 7;
    
    // Created at timestamp.
    google.protobuf.Timestamp created_at = 4;
    
    // Last update timestamp.
	google.protobuf.Timestamp updated_at = 5;
}

message LoginRequest {
	// Username of the user.
	string username = 1;

	// Password of the user.
	string password = 2;
}

message LoginResponse {
	// The JWT tag to be used to access chirpstack-application-server interfaces.
	string jwt = 1;
}

message ProfileResponse {
    // User object.
    User user = 1;
    
    // Organizations to which the user is associated.
    repeated OrganizationLink organizations = 3;
    
    // Profile settings.
	ProfileSettings settings = 4;
}

message GlobalSearchRequest {
	// Search query.
	string search = 1;

	// Max number of results to return.
	int64 limit = 2;

	// Offset offset of the result-set (for pagination).
	int64 offset = 3;
}

message GlobalSearchResponse {
	repeated GlobalSearchResult result = 1;
}

message GlobalSearchResult {
	// Record kind.
	string kind = 1;

	// Search score.
	float score = 2;

	// Organization id.
	int64 organization_id = 3 [json_name = "organizationID"];

	// Organization name.
	string organization_name = 4;

	// Application id.
	int64 application_id = 5 [json_name = "applicationID"];

	// Application name.
	string application_name = 6;

	// Device DevEUI (hex encoded).
	string device_dev_eui = 7 [json_name = "deviceDevEUI"];

	// Device name.
	string device_name = 8;

	// Gateway MAC (hex encoded).
	string gateway_mac = 9 [json_name = "gatewayMAC"];

	// Gateway name.
	string gateway_name = 10;
}

message BrandingResponse {
    // Logo html.
    string logo = 1;
    
    // Registration html.
    string registration = 2;
    
    // Footer html.
	string footer = 3;
}
