syntax = "proto3";

package api;

option go_package = "github.com/iBrick/chirpstack-api/go/v3/as/external/api";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";


// UserService - управляет доступом пользователей.
service UserService {
	// Get user list.
	rpc List(ListUserRequest) returns (ListUserResponse) {
		option(google.api.http) = {
			get: "/api/users"
		};
	}

	// Возвращает информацию о пользователе.
	rpc Get(GetUserRequest) returns (GetUserResponse) {
		option(google.api.http) = {
			get: "/api/users/{id}"
		};
	}

	// Создает нового пользователя.
	rpc Create(CreateUserRequest) returns (CreateUserResponse) {
		option(google.api.http) = {
			post: "/api/users"
			body: "*"
		};
	}

	// Обновляет существующего пользователя.
	rpc Update(UpdateUserRequest) returns (google.protobuf.Empty) {
		option(google.api.http) = {
			put: "/api/users/{user.id}"
			body: "*"
		};
	}

	// Удаляет пользователя.
	rpc Delete(DeleteUserRequest) returns (google.protobuf.Empty) {
		option(google.api.http) = {
			delete: "/api/users/{id}"
		};
	}

	// UpdatePassword - обновляет пароль.
	rpc UpdatePassword(UpdateUserPasswordRequest) returns (google.protobuf.Empty) {
		option(google.api.http) = {
			put: "/api/users/{user_id}/password"
			body: "*"
		};
	}

}

message User {
	// ID пользователя.
	// Will be set automatically on create.
	int64 id = 1;

	// Username.
	string username = 2;

	// Тайм-аут сессии в минутах.
	int32 session_ttl = 3 [json_name = "sessionTTL"];

	// Установите значение true, чтобы сделать пользователя глобальным администратором.
	bool is_admin = 4;

	// Установите в false, чтобы отключить пользователя.
	bool is_active = 5;

	// E-mail пользователя.
	string email = 6;

	// Дополнительное примечание для сохранения с пользователем.
	string note = 7;
}

message UserListItem {
	// ID пользователя.
	// Будет установлено автоматически при создании.
	int64 id = 1;

	// Username.
	string username = 2;

	// Тайм-аут сессии в минутах.
	int32 session_ttl = 3 [json_name = "sessionTTL"];

	// Установите значение true, чтобы сделать пользователя глобальным администратором.
	bool is_admin = 4;

	// Установите в false, чтобы отключить пользователя.
	bool is_active = 5;

	// Временная метка создания.
	google.protobuf.Timestamp created_at = 8;

	// Временная метка последнего обновления.
	google.protobuf.Timestamp updated_at = 9;
}

message UserOrganization {
	// ID организации.
	int64 organization_id = 1 [json_name = "organizationID"];

	// Пользователь имеет права администратора внутри организации.
	bool is_admin = 2;

    // Пользователь имеет права администрирования устройств в организации.
    bool is_device_admin = 3;

    // Пользователь имеет права администрирования базовых станций в организации.
    bool is_gateway_admin = 4;
}

message CreateUserRequest {
	// Объект Пользователь для создания.
	User user = 1;

	// Password of the user.
	string password = 2;

	// Добавить пользователя в следующие организации.
	repeated UserOrganization organizations = 3;
}

message CreateUserResponse {
	// ID пользователя.
	int64 id = 1;
}

message GetUserRequest {
	// ID пользователя.
	int64 id = 1;
}

message GetUserResponse {
	// Объект Пользователь.
	User user = 1;

	// Временная метка создания.
	google.protobuf.Timestamp created_at = 2;

	// Временная метка последнего обновления.
	google.protobuf.Timestamp updated_at = 3;
}

message UpdateUserRequest {
	// Объект Пользователь для обновления.
	User user = 1;
}

message DeleteUserRequest {
	// ID пользователя.
	int64 id = 1;
}

message ListUserRequest {
	// Ограничить максимальное число пользователей в выдаче результатов.
	int64 limit = 1;

	// Смещение в наборе результатов (для нумерации страниц).
	int64 offset = 2;

	// Если заполнено, данная строка будет использоваться для поиска по имени пользователя.
	string search = 3;
}

message ListUserResponse {
	// Общее число пользователей.
	int64 total_count = 1;

	// Результаты.
	repeated UserListItem result = 2;
}

message UpdateUserPasswordRequest {
	// ID пользователя.
	int64 user_id = 1;

	// Новый пароль.
	string password = 2;
}
