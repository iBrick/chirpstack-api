syntax = "proto3";

package api;

option go_package = "github.com/iBrick/chirpstack-api/go/v3/as/external/api";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "common/common.proto";
import "as/external/api/frameLog.proto";


// DeviceService - управление устройствами.
service DeviceService {
    // Create - создает указанное устройство.
    rpc Create(CreateDeviceRequest) returns (google.protobuf.Empty) {
        option(google.api.http) = {
            post: "/api/devices"
            body: "*"
        };
    }

    // Get - возвращает устройство по указанному DevEUI.
    rpc Get(GetDeviceRequest) returns (GetDeviceResponse) {
        option (google.api.http) = {
            get: "/api/devices/{dev_eui}"
        };
    }

    // List - возвращает список доступных устройств.
    rpc List(ListDeviceRequest) returns (ListDeviceResponse) {
        option (google.api.http) = {
            get: "/api/devices"
        };
    }

    // Delete - удаляет устройство по DevEUI.
    rpc Delete(DeleteDeviceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/devices/{dev_eui}"
        };
    }

    // Update обновляет устройство по DevEUI.
    rpc Update(UpdateDeviceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/devices/{device.dev_eui}"
            body: "*"
        };
    }

    // CreateKeys создает указанные ключи устройства.
    rpc CreateKeys(CreateDeviceKeysRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/devices/{device_keys.dev_eui}/keys"
            body: "*"
        };
    }

    // GetKeys возвращает ключи устройства по DevEUI.
    rpc GetKeys(GetDeviceKeysRequest) returns (GetDeviceKeysResponse) {
        option (google.api.http) = {
            get: "/api/devices/{dev_eui}/keys"
        };
    }

    // UpdateKeys обновляет ключи устройства.
    rpc UpdateKeys(UpdateDeviceKeysRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            put: "/api/devices/{device_keys.dev_eui}/keys"
            body: "*"
        };
    }

    // DeleteKeys удаляет ключи устройства для указанного DevEUI.
    rpc DeleteKeys(DeleteDeviceKeysRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/devices/{dev_eui}/keys"
        };
    };

    // Активирует / переактивирует устройство (только для ABP).
    rpc Activate(ActivateDeviceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/api/devices/{device_activation.dev_eui}/activate"
            body: "*"
        };
    }

    // Deactivate - деактивирует устройство.
    rpc Deactivate(DeactivateDeviceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/api/devices/{dev_eui}/activation"
        };
    }

    // GetActivation - возвращает детали активации устройства (OTAA и ABP).
    rpc GetActivation(GetDeviceActivationRequest) returns (GetDeviceActivationResponse) {
        option (google.api.http) = {
            get: "/api/devices/{dev_eui}/activation"
        };
    }

    // GetRandomDevAddr возвращает случайно сгенерированный DevAddr на основе префикса NwkID.
    rpc GetRandomDevAddr(GetRandomDevAddrRequest) returns (GetRandomDevAddrResponse) {
        option (google.api.http) = {
            post: "/api/devices/{dev_eui}/getRandomDevAddr"
        };
    }

    // StreamFrameLogs осуществляет потоковую передачу uplink и downlink кадров LoRaWAN для заданного DevEUI.
	//   * Предназначено только для отладки.
	//   * Не работает из веб-браузера.
    rpc StreamFrameLogs(StreamDeviceFrameLogsRequest) returns (stream StreamDeviceFrameLogsResponse) {
        option (google.api.http) = {
            get: "/api/devices/{dev_eui}/frames"
        };
    }

    // StreamEventLogs осуществляет потоковую передачу событий устройства (uplink данные, ACK, join-запросы, ошибки).
	//   * Предназначено только для отладки.
	//   * Не работает из веб-браузера.
    rpc StreamEventLogs(StreamDeviceEventLogsRequest) returns (stream StreamDeviceEventLogsResponse) {
        option (google.api.http) = {
            get: "/api/devices/{dev_eui}/events"
        };
    }
}

message Device {
    // DevEUI устройства (в HEX).
    string dev_eui = 1 [json_name = "devEUI"]; 
    
    // Название устройства (если не заполнено, будет установлено в DevEUI).
    string name = 2;

    // ID приложения, в которое должно быть добавлено устройство. Перенос возможен при условии,
    // что в приложениях используется одинаковый сервис-профиль.
    int64 application_id = 3 [json_name = "applicationID"];

    // Описание устройства.
    string description = 4;

    // DeviceProfileID, присвоенный устройству.
    string device_profile_id = 5 [json_name = "deviceProfileID"];

    // Пропустить проверку счетчика пакетов (снижает уровень защиты, упрощает отладку).
    bool skip_f_cnt_check = 6;

    // Контрольная высота.
    // При использовании геолокации эта высота будет использоваться 
	// в качестве эталона(если поддерживается сервером геолокации) 
	// для повышения точности
    double reference_altitude = 7;

    // Переменные (определяются пользователем).
    // Используются в интеграциях (например, для хранения токенов, индивидуальных 
    // для каждого устройства) и не передаются внутри данных от устройства.
    map<string, string> variables = 8;

    // Тэги (определяются пользователем).
    // Используются в интеграциях и передаются вместе с данными устройства.
    // Например, для сохранения типа и подтипа устройства, подключенным сенсорам.
    // Предназначены для агрегации и фильтрации.
    map<string, string> tags = 9;
}

message DeviceListItem {
    // DevEUI устройства (в HEX).
    string dev_eui = 1 [json_name = "devEUI"]; 
    
    // Название устройства.
    string name = 2;

    // ID приложения.
    int64 application_id = 3 [json_name = "applicationID"];

    // Описание устройства.
    string description = 4;

    // ID профиля устройства.
    string device_profile_id = 5 [json_name = "deviceProfileID"];

    // Название профиля устройства.
    string device_profile_name = 6;

    // Состояние батарейки (deprecated, используйте device_status_battery_level).
    // 0:      The end-device is connected to an external power source
    // 1..254: The battery level, 1 being at minimum and 254 being at maximum
    // 255:    The end-device was not able to measure the battery level
    // 256:    The device-status is not available.
    uint32 device_status_battery = 7;

    // Состояние радиоканала
    // -32..32: The demodulation SNR ration in dB
    // 256:     The device-status is not available.
    int32  device_status_margin = 8;

    // Устройство подключено к внешнему источнику питания.
    bool device_status_external_power_source = 10;

    // Состояние батарейки устройства недоступно.
    bool device_status_battery_level_unavailable = 11;

    // Уровень заряда батарейки устройства в процентах.
    float device_status_battery_level = 12;

    // Время последнего сообщения от устройства или пустая строка, 
	// когда устройство никогда не отправляло никаких данных.
    google.protobuf.Timestamp last_seen_at = 9 [json_name = "lastSeenAt"];
}

message DeviceKeys {
    // DevEUI устройства (в HEX).
    string dev_eui = 1 [json_name = "devEUI"];

    // Network root key (в HEX).
    // Note: For LoRaWAN 1.0.x, use this field for the LoRaWAN 1.0.x 'AppKey`!
    string nwk_key = 2;

    // Application root key (в HEX).
    // Note: This field only needs to be set for LoRaWAN 1.1.x devices!
    string app_key = 3;

    // Gen application key (в HEX).
    // This is an optional key that only must be set for LORaWAN 1.0.x devices
    // that implement the remote multicast setup specification.
    string gen_app_key = 4;
}

message CreateDeviceRequest {
    // Объект Устройство для создания.
    Device device = 1;
}

message GetDeviceRequest {
    // DevEUI устройства (в HEX).
    string dev_eui = 1 [json_name = "devEUI"];
}

message GetDeviceResponse {
    // Объект Устройство.
    Device device = 1;

    // Created at 2
    // Updated at 3
    // First seen at 4

    // Время последнего пакета.
    google.protobuf.Timestamp last_seen_at = 5 [json_name = "lastSeenAt"];

    // Состояние батарейки устройства
    // 0:      Устройство подключено к внешнему питанию
    // 1..254: Уровень заряда батареи, 1 - минимум, 254 - максимум
    // 255:    Конечное устройство не может измерить уровень заряда
    // 256:    Статус устройства не доступен.
    uint32 device_status_battery = 6;

    // Состояние радиоканала устройства
    // -32..32: Соотношение сигнал/шум SNR в dB
    // 256:     Статус устройства не доступен.
    int32  device_status_margin = 20;

    // Местоположени устройства.
    // This will set when the network-server was able to resolve the location
    // using the geolocation-server.
    common.Location location = 21;
}

message ListDeviceRequest {
    // Ограничить макс. число устройств в выдаче результатов.
    int64 limit = 1;

    // Смещение в наборе результатов (для нумерации страниц).
    int64 offset = 2;

    // ID приложения для применения фильтра.
    int64 application_id = 3 [json_name = "applicationID"];

    // Поиск по названию или DevEUI.
    string search = 4;

    // Multicast-group ID для применения фильтра (отформатированный UUID string).
    string multicast_group_id = 5 [json_name = "multicastGroupID"];

    // ID Сервис-профиля ID для применения фильтра (отформатированный UUID string).
    string service_profile_id = 6 [json_name = "serviceProfileID"];

    // Тэги для фильтрации.
    map<string, string> tags = 7;
}

message ListDeviceResponse {
    // Общее число устройств в результатах.
    int64 total_count = 1;

    // Устройства в результатах.
    repeated DeviceListItem result = 2;
}

message DeleteDeviceRequest {
    // DevEUI устройства (в HEX).
    string dev_eui = 1 [json_name = "devEUI"];
}


message UpdateDeviceRequest {
    // Объект Устройство для обновления.
    Device device = 1;
}

message CreateDeviceKeysRequest {
    // Device-keys object to create.
    DeviceKeys device_keys = 1;
}

message GetDeviceKeysRequest {
    // DevEUI устройства (в HEX).
    string dev_eui = 1 [json_name = "devEUI"];
}

message GetDeviceKeysResponse {
    // Объект Ключи устройства.
    DeviceKeys device_keys = 1;
}

message UpdateDeviceKeysRequest {
    // Объект Ключи устройства для обновления.
    DeviceKeys device_keys = 1;
}

message DeleteDeviceKeysRequest {
    // DevEUI устройства (в HEX).
    string dev_eui = 1 [json_name = "devEUI"];
}

message DeviceActivation {
    // DevEUI устройства (в HEX).
    string dev_eui = 1 [json_name = "devEUI"];

    // DevAddr (в HEX).
    string dev_addr = 2;

    // Сессионный ключ приложения (в HEX).
    string app_s_key = 3;

    // Сессионный сетевой ключ (в HEX).
    string nwk_s_enc_key = 4;

    // Serving network session integrity key (HEX encoded).
    string s_nwk_s_int_key = 8;

    // Forwarding network session integrity key (HEX encoded).
    string f_nwk_s_int_key = 9;

    // Uplink frame-counter.
    uint32 f_cnt_up = 5;

    // Downlink network frame-counter.
    uint32 n_f_cnt_down = 6;

    // Downlink application frame-counter.
    uint32 a_f_cnt_down = 10;
}

message ActivateDeviceRequest {
    DeviceActivation device_activation = 1;
}

message DeactivateDeviceRequest {
    // DevEUI устройства (в HEX).
    string dev_eui = 1 [json_name = "devEUI"];
}

message GetDeviceActivationRequest {
    // DevEUI устройства (в HEX).
    string dev_eui = 1 [json_name = "devEUI"];
}

message GetDeviceActivationResponse {
    // Device-activation object.
    DeviceActivation device_activation = 1;
}

message GetRandomDevAddrRequest {
    // DevEUI устройства (в HEX).
    string dev_eui = 1 [json_name = "devEUI"];
}

message GetRandomDevAddrResponse {
    // Адрес устройства devAddr (в HEX).
    string dev_addr = 1;
}

message StreamDeviceFrameLogsRequest {
    // DevEUI устройства (в HEX).
    string dev_eui = 1 [json_name = "devEUI"];
}

message StreamDeviceFrameLogsResponse {
    oneof frame {
        // Contains an uplink frame.
        UplinkFrameLog uplink_frame = 1;

        // Contains a downlink frame.
        DownlinkFrameLog downlink_frame = 2;
    }
}

message StreamDeviceEventLogsRequest {
    // DevEUI устройства (в HEX).
    string dev_eui = 1 [json_name = "devEUI"];
}

message StreamDeviceEventLogsResponse {
    // Тип события.
    string type = 1;

    // The event payload in JSON encoding.
    string payload_json = 2 [json_name = "payloadJSON"];
}
