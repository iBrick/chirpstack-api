syntax = "proto3";

package api;

option go_package = "github.com/iBrick/chirpstack-api/go/v3/as/external/api";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "common/common.proto";


// GatewayProfileService - сервис, управляющий профилями базовой станции.
service GatewayProfileService {
	// Create создает указанный профиль базовой станции.
	rpc Create(CreateGatewayProfileRequest) returns (CreateGatewayProfileResponse) {
		option (google.api.http) = {
			post: "/api/gateway-profiles"
			body: "*"
		};
	}

	// Get возвращает профиль базовой станции, соответствующий указанному ID.
	rpc Get(GetGatewayProfileRequest) returns (GetGatewayProfileResponse) {
		option (google.api.http) = {
			get: "/api/gateway-profiles/{id}"
		};
	}

	// Update обновляет указанный профиль базовой станции.
	rpc Update(UpdateGatewayProfileRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			put: "/api/gateway-profiles/{gateway_profile.id}"
			body: "*"
		};
	}

	// Delete удаляет профиль базовой станции по указанному id.
	rpc Delete(DeleteGatewayProfileRequest) returns (google.protobuf.Empty) {
		option (google.api.http) = {
			delete: "/api/gateway-profiles/{id}"
		};
	}

	// List возвращает существующие профили базовых станций.
	rpc List(ListGatewayProfilesRequest) returns (ListGatewayProfilesResponse) {
		option (google.api.http) = {
			get: "/api/gateway-profiles"
		};
	}
}

message GatewayProfile {
    // ID профиля базовых станций (строка UUID).
    string id = 1;

    // Название профиля базовой станции.
    string name = 2;

    // ID сетевого сервера для профиля базовой станции.
    int64 network_server_id = 3 [json_name = "networkServerID"];

    // Каналы по умолчанию (каналы, указанные в спецификации региональных параметров LoRaWAN), включенные для этого профиля
    repeated uint32 channels = 4;

    // В конфигурацию каналов добавлены дополнительные каналы (если регион LoRaWAN поддерживает добавление пользовательских каналов).
    repeated GatewayProfileExtraChannel extra_channels = 5;
}

message GatewayProfileListItem {
    // ID профиля базовой станции (строка UUID).
    string id = 1;

    // Название профиля базовой станции.
    string name = 2;

    // ID сетевого сервера для профиля базовой станции.
    int64 network_server_id = 3 [json_name = "networkServerID"];

    // Название сетевого сервера.
    string network_server_name = 7;

    // Временная метка создания.
    google.protobuf.Timestamp created_at = 5;

    // Временная метка последнего обновления.
    google.protobuf.Timestamp updated_at = 6;
}

message GatewayProfileExtraChannel {
    // Модуляция.
    common.Modulation modulation = 1;

    // Частота.
    uint32 frequency = 2;

    // Полоса пропускания.
    uint32 bandwidth = 3;

    // Скорость соединения (в случае модуляции FSK).
    uint32 bitrate = 4;

    // Факторы расширения (в случае модуляции LoRa).
    repeated uint32 spreading_factors = 5;
}

message CreateGatewayProfileRequest {
    // Объект Профиль базовой станции для создания.
    GatewayProfile gateway_profile = 1;

}

message CreateGatewayProfileResponse {
    // ID профиля базовой станции (строка UUID).
    string id = 1;
}

message GetGatewayProfileRequest {
    // ID профиля базовой станции (строка UUID).
    string id = 1;
}

message GetGatewayProfileResponse {
    // Объект профиля базовой станции.
    GatewayProfile gateway_profile = 1;

    // Временная метка создания.
    google.protobuf.Timestamp created_at = 2;

    //Временная метка последнего обновления.
    google.protobuf.Timestamp updated_at = 3;
}

message UpdateGatewayProfileRequest {
    // Объект Профиль базовой станции для обновления.
    GatewayProfile gateway_profile = 1;
}

message DeleteGatewayProfileRequest {
    //  ID профиля базовой станции (строка UUID).
    string id = 1;
}

message ListGatewayProfilesRequest {
    // Максимальное число значений в ответе.
    int64 limit = 1;

    // Смещение в наборе результатов (для нумерации страниц).
    int64 offset = 2;

    // ID сетевого сервера для фильтрации (необязательное).
    int64 network_server_id = 3 [json_name = "networkServerID"];
}

message ListGatewayProfilesResponse {
    // Общее число профилей базовых станций.
    int64 total_count = 1;

    repeated GatewayProfileListItem result = 2;
}
