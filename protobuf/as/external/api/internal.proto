syntax = "proto3";

package api;

option go_package = "github.com/iBrick/chirpstack-api/go/v3/as/external/api";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "as/external/api/user.proto";


// InternalService - сервис, предоставляющий API для внутреннего использования.
service InternalService {
	// Log in a user
	rpc Login(LoginRequest) returns (LoginResponse) {
		option(google.api.http) = {
			post: "/api/internal/login"
			body: "*"
		};
	}

	// Получить профиль текущего пользователя 
	rpc Profile(google.protobuf.Empty) returns (ProfileResponse) {
		option(google.api.http) = {
			get: "/api/internal/profile"
		};
	}

	// Получить брендинг для пользовательского интерфейса
	rpc Branding(google.protobuf.Empty) returns (BrandingResponse) {
		option(google.api.http) = {
			get: "/api/internal/branding"
		};
	}

	// Выполнить глобальный поиск.
	rpc GlobalSearch(GlobalSearchRequest) returns (GlobalSearchResponse) {
		option(google.api.http) = {
			get: "/api/internal/search"
		};
	}

    // CreateAPIKey - создает ключ API.
    rpc CreateAPIKey(CreateAPIKeyRequest) returns (CreateAPIKeyResponse) {
        option(google.api.http) = {
            post: "/api/internal/api-keys"
            body: "*"
        };
    }

    // DeleteAPIKey удаляет ключ API.
    rpc DeleteAPIKey(DeleteAPIKeyRequest) returns (google.protobuf.Empty) {
        option(google.api.http) = {
            delete: "/api/internal/api-keys/{id}"
        };
    }

    // ListAPIKeys возвращает список доступных API ключей.
    rpc ListAPIKeys(ListAPIKeysRequest) returns (ListAPIKeysResponse) {
        option(google.api.http) = {
            get: "/api/internal/api-keys"
        };
    }
}

message APIKey {
    // ID ключа API.
    // Значение автоматически генерируется при создании.
    string id = 1;

    // Название.
    string name = 2;

    // Ключ глобального администратора?
    bool is_admin = 3;

    // ID организации.
    // Если указано, то ключ API позволяет работать с ресурсами только внутри указанной организации.
    int64 organization_id = 4 [json_name = "organizationID"];

    // ID приложения.
    // Если указано, то ключ API позволяет работать с ресурсами только внутри указанного приложения.
    int64 application_id = 5 [json_name = "applicationID"];
}

message CreateAPIKeyRequest {
    // The API key to create.
    APIKey api_key = 1;
}

message CreateAPIKeyResponse {
    // API key ID.
    string id = 1;

    // JWT token for this API Key.
    string jwt_token = 2;
}

message DeleteAPIKeyRequest {
    // API key ID.
    string id = 1;
}

message ListAPIKeysRequest {
    // Ограничить макс. число API ключей в выдаче результатов..
    int64 limit = 1;

    // Смещение в наборе результатов (для нумерации страниц).
    int64 offset = 2;

    // Является администратором.
    bool is_admin = 3;

    // Фильтр по ID организации.
    int64 organization_id = 4 [json_name = "organizationID"];

    // Фильтр по ID приложения.
    int64 application_id = 5 [json_name = "applicationID"];
}

message ListAPIKeysResponse {
    // Общее число API ключей.
    int64 total_count = 1;

    repeated APIKey result = 2;
}

message ProfileSettings {
	// Существующие пользователи в системе не могут быть назначены организациям и
        // приложениям и не могут быть назначены глобальными администраторами?
	bool disable_assign_existing_users = 1;
}

// Определяет организацию, в которую входит пользователь.
message OrganizationLink {
    // ID организации.
    int64 organization_id = 1 [json_name = "organizationID"];
    
    // Название организации.
    string organization_name = 2;
    
    // Пользователь является администратором данной организации.
    // There is no need to set the is_device_admin and is_gateway_admin flags.
    bool is_admin = 3;

    // Пользователь является администратором устройств.
    bool is_device_admin = 6;

    // Пользователь является администратором базовых станций.
    bool is_gateway_admin = 7;
    
   // Временная метка создания.
    google.protobuf.Timestamp created_at = 4;
    
  // Временная метка последнего изменения.
	google.protobuf.Timestamp updated_at = 5;
}

message LoginRequest {
	// Логин пользователя.
	string username = 1;

	// Пароль пользователя.
	string password = 2;
}

message LoginResponse {
	// Тег JWT, используемый для доступа к интерфейсам LoRa-app-server.
	string jwt = 1;
}

message ProfileResponse {
    // Объект - пользователь.
    User user = 1;
    
    // Организации, с которыми связан пользователь.
    repeated OrganizationLink organizations = 3;
    
    // Настройка профиля.
	ProfileSettings settings = 4;
}

message GlobalSearchRequest {
	// Поисковый запрос.
	string search = 1;

	// Ограничить макс. число ответов.
	int64 limit = 2;

	// Смещение в наборе результатов (для нумерации страниц).
	int64 offset = 3;
}

message GlobalSearchResponse {
	repeated GlobalSearchResult result = 1;
}

message GlobalSearchResult {
	// Тип записи.
	string kind = 1;

	// Рейтинг в поиске.
	float score = 2;

	// ID организации.
	int64 organization_id = 3 [json_name = "organizationID"];

	// Название организации.
	string organization_name = 4;

	// ID приложения.
	int64 application_id = 5 [json_name = "applicationID"];

	// Название приложения.
	string application_name = 6;

	// DevEUI устройства (в hex).
	string device_dev_eui = 7 [json_name = "deviceDevEUI"];

	// Название устройства.
	string device_name = 8;

	// MAC шлюза (в hex).
	string gateway_mac = 9 [json_name = "gatewayMAC"];

	// Название шлюза.
	string gateway_name = 10;
}

message BrandingResponse {
    // Logo html.
    string logo = 1;
    
    // Registration html.
    string registration = 2;
    
    // Footer html.
	string footer = 3;
}
